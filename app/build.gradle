plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.onegravity.websocketproxy"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(ONEGRAVITY_KEYSTORE_FILE)
            storePassword ONEGRAVITY_KEYSTORE_PASSWORD
            keyAlias ONEGRAVITY_WEBSOCKET_KEY_ALIAS
            keyPassword ONEGRAVITY_WEBSOCKET_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    // let's put the variant name and the version number into the generated apk
    android.applicationVariants.all { variant ->
        project.logger.lifecycle('  processing variant: ' + variant.versionName)

        def appName
        //Check if an applicationName property is supplied; if not use the name of the parent project.
        if (project.hasProperty("applicationName")) {
            appName = applicationName
        } else {
            appName = parent.name
        }

        variant.outputs.all { output ->
            def lintTask = tasks["lint${variant.name.capitalize()}"]
            output.assemble.dependsOn lintTask

            def newApkName

            //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
            newApkName = "${appName}-${variant.versionName}.apk"
            outputFileName = new File(newApkName)
        }
    }
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    // RxJava
    implementation "io.reactivex.rxjava3:rxjava:3.0.7"
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'com.jakewharton.rxrelay3:rxrelay:3.0.0'

    // WebSocket server/client
    implementation "org.java-websocket:Java-WebSocket:1.5.1"
}